#!/usr/bin/php -q
<?php
/* 
  phpd Copyright (C) 2007 Andrew Rose
  rose.andrew@gmail.com
  http://andrewrose.co.uk
  http://andrew-rose.blogspot.com

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

define('INICONF', 'phpd.ini');

set_time_limit(0);
declare(ticks = 1);

//require_once('/usr/lib/aplc/Aplc.php');
require_once('../../Aplc.php');
Aplc::setupAutoloader();

require_once('modules/request.php');
require_once('modules/database.php');
require_once('modules/session.php');

interface Phpd_Application
{
	public function init(Phpd_Child $o);
	public function request(Phpd_Child $o);
	public function cleanup(Phpd_Child $o);
	public function deinit(Phpd_Child $o);
}

interface Phpd_Module
{
	public function init(Phpd_Child $o);
	public function request(Phpd_Child $o);
	public function cleanup(Phpd_Child $o);
	public function deinit(Phpd_Child $o);
}

class Phpd_Child extends Aplc_Daemon_Child
{
	public $modules = array();

	public $server = "phpd/1.0";
	public $protocol = "HTTP/1.1";
	public $socket;

	public $application = '';
	public $class = FALSE;
	public $headers = array();

	public function start()
	{
		$this->initModules();
		$this->application->init($this);

		while(1)
		{
			/* we silence this as it will fall over when we set nonblock on the sock during shutdown */
			if(($c = @socket_accept($this->socket)) !== FALSE)
			{
				$this->request = socket_read($c, 1024000);
	
				$this->requestModules();

				/* main application entry point */
				$data = $this->application->request($this);
				/* */

				$headers = $this->headers(200, "OK", strlen($data));

				$response = (string)$headers.$data;

				if(socket_write($c, $response, strlen($response)) != strlen($response))
				{
					echo "Failed to write response...\n";
				}

				socket_close($c);

				$this->application->cleanup($this);
				$this->cleanupModules();
				$this->cleanup();
			}
			else
			{
				usleep(5000);
			}

			if($this->shutdown)
			{
				return;
			}
		}
	}

	public function initModules()
	{
		foreach($this->modules as $module)
		{
			$module->init($this);
		}
	}

	public function requestModules()
	{
		foreach($this->modules as $module)
		{
			$module->request($this);
		}
	}

	public function cleanupModules()
	{
		foreach($this->modules as $module)
		{
			$module->cleanup($this);
		}
	}

	public function deinitModules()
	{
		foreach($this->modules as $module)
		{
			$module->deinit($this);
		}
	}

	public function cleanup()
	{
		$this->headers = array();
	}

	public function header($header)
	{
		$this->headers[] = $header;
	}

	public function headers($status, $title, $length=0, $extra='', $mime='text/html')
	{
		$headers = $this->protocol.' '.$status.' '.$title."\r\n";
		$headers .= 'Server: '.$this->server."\r\n";
		$headers .= 'Date: '.date('D, d M Y H:i:s e', time())."\r\n";
		foreach($this->headers as $header)
		{
			$headers .= $header."\r\n";
		}
		if($extra)
		{
			$headers .= $extra;
		}
		$headers .= 'Content-Type: '.$mime."\r\n";
		$headers .= 'Content-Length: '.$length."\r\n";
		$headers .= 'Connection: close'."\r\n";
		return $headers . "\r\n";
	}

	public function reload()
	{
		$this->class = new test;
	}

	public function shutdown()
	{
		$this->application->deinit($this);
		$this->deinitModules();
	}
}

class Phpd extends Aplc_Daemon
{
	public $socket;

	public function start()
	{
		if(!$this->reg->exists('application.name'))
		{
			exit("Unable to determine application!\n");
		}

		if(!file_exists($this->reg->get('application.name').'/entrypoint.php'))
		{
			exit("Unable to locate application entrypoint.\n");
		}
		else
		{
			$class = $this->reg->get('application.name');
			require_once($this->reg->get('application.name').'/entrypoint.php');
			$application = new $class;
		}

		if(!($this->socket = @socket_create(AF_INET, SOCK_STREAM, 0)))
		{
			exit("Failed to create socket!\n");
		}

		if(!@socket_bind($this->socket, $this->reg->get('server.address'), $this->reg->get('server.port')))
		{
			$error = socket_last_error($this->socket);
			$error = socket_strerror($error);
			exit('Unable to bind to socket: '.$error."\n");
		}

		if(!@socket_listen($this->socket, $this->reg->get('server.backLog')))
		{
			exit("Unable to listen on socket!\n");
		}

		/* if only we could catch a signal when a socket did block... */
		socket_set_nonblock($this->socket);

		$phpd = new Phpd_Child;
		$phpd->application = $application;

		if($this->reg->exists('server.modules'))
		{
			foreach($this->reg->get('server.modules') as $module)
			{
				$class = 'Phpd_Module_'.$module;
				$phpd->modules[] = new $class;
			}
		}

		for($i=$this->reg->get('server.maxChildren');$i;$i--)
		{
			$phpd->socket = $this->socket;
			$this->child($phpd);
		}

		unset($phpd);
		unset($application);

		while(1)
		{
			if($this->shutdown)
			{
				return TRUE;
			}
			sleep(1);
		}
	}

	public function reload()
	{
	}

	public function shutdown()
	{
		$this->waitChildren();
		socket_close($this->socket);
	}
}

$phpd = new phpd;
$phpd->main();
